package com.ninja.alexa.skill.kitchen.alexa;

import java.io.IOException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.amazon.speech.slu.Intent;
import com.amazon.speech.speechlet.IntentRequest;
import com.amazon.speech.speechlet.LaunchRequest;
import com.amazon.speech.speechlet.Session;
import com.amazon.speech.speechlet.SessionEndedRequest;
import com.amazon.speech.speechlet.SessionStartedRequest;
import com.amazon.speech.speechlet.Speechlet;
import com.amazon.speech.speechlet.SpeechletException;
import com.amazon.speech.speechlet.SpeechletResponse;
import com.amazon.speech.ui.PlainTextOutputSpeech;
import com.amazon.speech.ui.Reprompt;
import com.amazon.speech.ui.SimpleCard;
import com.amazonaws.Response;
import com.amazonaws.util.CollectionUtils;
import com.fasterxml.jackson.databind.ObjectReader;
import com.ninja.alexa.skill.kitchen.api.APICaller;
import com.ninja.alexa.skill.kitchen.aws.services.DynamoDBService;
import com.ninja.alexa.skill.kitchen.model.AlexaSessionInfo;
import com.ninja.alexa.skill.kitchen.model.RecipeResponse;
import com.ninja.alexa.skill.kitchen.utilities.Utilities;

/**
 * This sample shows how to create a simple speechlet for handling speechlet
 * requests.
 */
public class AlexaSpeechlet implements Speechlet {
	private Logger LOGGER = LoggerFactory.getLogger(AlexaSpeechlet.class);
	private DynamoDBService dbService = new DynamoDBService();
	private APICaller apiCaller = new APICaller();
	private ObjectReader recipeReader = Utilities.getJSONMapper().readerFor(RecipeResponse.class);

	/**
	 * Creates and returns a {@code SpeechletResponse} with a welcome message.
	 *
	 * @return SpeechletResponse spoken and visual response for the given intent
	 */
	private SpeechletResponse getWelcomeResponse() {
		String speechText = "Welcome to the Kitchen Helper, what type of cuisine would you like to eat today?";

		// Create the Simple card content.
		SimpleCard card = new SimpleCard();
		card.setTitle("Alexa Kitchen Helper");
		card.setContent(speechText);

		// Create the plain text output.
		PlainTextOutputSpeech speech = new PlainTextOutputSpeech();
		speech.setText(speechText);

		// Create reprompt
		Reprompt reprompt = new Reprompt();
		PlainTextOutputSpeech speechReprompt = new PlainTextOutputSpeech();
		speechReprompt.setText("Sorry, I did not understand that. What type of cuisine would you like to eat today?");
		reprompt.setOutputSpeech(speechReprompt);

		return SpeechletResponse.newAskResponse(speech, reprompt, card);
	}

	/**
	 * Creates a {@code SpeechletResponse} for the hello intent.
	 *
	 * @return SpeechletResponse spoken and visual response for the given intent
	 */
	private SpeechletResponse getResponse(final String speechText) {
		// Create the Simple card content.
		SimpleCard card = new SimpleCard();
		card.setTitle("Alexa Kitchen Helper");
		card.setContent(speechText);

		// Create the plain text output.
		PlainTextOutputSpeech speech = new PlainTextOutputSpeech();
		speech.setText(speechText);

		// Create reprompt
		Reprompt reprompt = new Reprompt();
		PlainTextOutputSpeech speechReprompt = new PlainTextOutputSpeech();
		speechReprompt.setText("Sorry, I did not understand that." + speechText);
		reprompt.setOutputSpeech(speechReprompt);

		return SpeechletResponse.newAskResponse(speech, reprompt, card);
	}

	/**
	 * Creates a {@code SpeechletResponse} for the help intent.
	 *
	 * @return SpeechletResponse spoken and visual response for the given intent
	 */
	private SpeechletResponse getHelpResponse() {
		String speechText = "You can say hello to me!";

		// Create the Simple card content.
		SimpleCard card = new SimpleCard();
		card.setTitle("HelloWorld");

		card.setContent(speechText);

		// Create the plain text output.
		PlainTextOutputSpeech speech = new PlainTextOutputSpeech();
		speech.setText(speechText);

		// Create reprompt
		Reprompt reprompt = new Reprompt();
		reprompt.setOutputSpeech(speech);

		return SpeechletResponse.newAskResponse(speech, reprompt, card);
	}

	/**
	 * Store DB Object
	 * 
	 * @param sessionId
	 * @param stateType
	 * @param stateInput
	 */
	private void storeDBObject(final String sessionId, final String stateType, final String stateInput) {
		dbService.insertEntry(getDynamoDBObject(sessionId, stateType, stateInput));
	}

	private AlexaSessionInfo getDynamoDBObject(final String sessionId, final String stateType,
			final String stateInput) {
		AlexaSessionInfo alexaSessionInfo = new AlexaSessionInfo();
		alexaSessionInfo.setSessionId(sessionId);
		alexaSessionInfo.setStateType(stateType);
		alexaSessionInfo.setStateInput(stateInput);
		return alexaSessionInfo;
	}

	@Override
	public SpeechletResponse onIntent(IntentRequest request, Session session) throws SpeechletException {
		System.out.println("On Intenet: " + request);

		Intent intent = request.getIntent();
		String intentName = (intent != null) ? intent.getName() : null;

		System.out.println(intentName);

		if ("CusineNameIntent".equals(intentName)) {
			session.setAttribute("nextIntent", "SpiceLevelIntent");
			session.setAttribute("cuisineName", intent.getSlots().get("Cusine").getValue());
			storeDBObject(session.getSessionId(), "CusineNameIntent", intent.getSlots().get("Cusine").getValue());
			return getResponse(
					"Great Choice! Let's get you started with some " + intent.getSlots().get("Cusine").getValue()
							+ " cuisine today. How spicy would you like it to be?");
		} else if ("SpiceLevelIntent".equals(intentName)) {
			session.setAttribute("nextIntent", "PresentIngredientsIntent");
			session.setAttribute("spiceLevel", intent.getSlots().get("SpiceLevel").getValue());
			storeDBObject(session.getSessionId(), "SpiceLevelIntent", intent.getSlots().get("SpiceLevel").getValue());
			return getResponse("Awesome! Let's cook some " + intent.getSlots().get("SpiceLevel").getValue()
					+ " food today. What ingredients do you have?");
		} else if ("PresentIngredientsIntent".equals(intentName)) {
			session.setAttribute("nextIntent", "SelectRecipeIntent");
			session.setAttribute("ingredients", intent.getSlots().get("Ingredient").getValue());
			storeDBObject(session.getSessionId(), "PresentIngredientsIntent",
					intent.getSlots().get("Ingredient").getValue().replace(" ", ","));
			String ingredients = intent.getSlots().get("Ingredient").getValue().replace(" ", ",");

			LOGGER.info("Iteration #1");
			try {
				Response<String> response = apiCaller
						.sendRequest(apiCaller.generateRequest(URLEncoder.encode(ingredients, "UTF-8")));
				RecipeResponse recipeResponse = recipeReader.readValue(response.getAwsResponse());

				if (null == recipeResponse || CollectionUtils.isNullOrEmpty(recipeResponse.getRecipes())) {
					String[] ingredientsArray = intent.getSlots().get("Ingredient").getValue().split(" ");
					List<String> ingredientsList = new ArrayList<>();

					for (final String ing : ingredientsArray) {
						ingredientsList.add(ing);
					}

					/* Call Again */
					while (CollectionUtils.isNullOrEmpty(ingredientsList)
							&& CollectionUtils.isNullOrEmpty(recipeResponse.getRecipes())) {
						LOGGER.info("Next Iteration...");
						ingredientsList.remove((int) (Math.random() * ingredientsList.size()));
						response = apiCaller.sendRequest(apiCaller.generateRequest(URLEncoder.encode(
								ingredientsList.toString().replace(" ", "").replace("[", "").replace("]", ""),
								"UTF-8")));
						LOGGER.info(ingredientsList.toString().replace(" ", "").replace("[", "").replace("]", ""));
						System.out
								.println(ingredientsList.toString().replace(" ", "").replace("[", "").replace("]", ""));
						recipeResponse = recipeReader.readValue(response.getAwsResponse());
					}

					if (CollectionUtils.isNullOrEmpty(recipeResponse.getRecipes())) {
						return getResponse(
								"Sorry, I haven't found any recipes. Would you like to cook something else?");
					}
				}

				return getResponse("I have found a great recipe for you. It's "
						+ recipeResponse.getRecipes().get(0).getTitle() + " Would you like to hear it?");
			} catch (IOException e) {
				e.printStackTrace();
				throw new SpeechletException("Invalid Intent");
			}
		} else if ("AMAZON.HelpIntent".equals(intentName)) {
			return getHelpResponse();
		} else {
			throw new SpeechletException("Invalid Intent");
		}
	}

	@Override
	public SpeechletResponse onLaunch(LaunchRequest request, Session session) throws SpeechletException {
		LOGGER.debug("Session Launched With Session ID: " + session.getSessionId());
		session.setAttribute("nextIntent", "CusineNameIntent");

		AlexaSessionInfo alexaSessionInfo = new AlexaSessionInfo();
		alexaSessionInfo.setSessionId(session.getSessionId());
		alexaSessionInfo.setStateType("Launch");
		dbService.insertEntry(alexaSessionInfo);

		return getWelcomeResponse();
	}

	@Override
	public void onSessionEnded(SessionEndedRequest sessionEndedRequest, Session session) throws SpeechletException {
		LOGGER.debug("Session Ended With Session ID: " + session.getSessionId());
	}

	@Override
	public void onSessionStarted(SessionStartedRequest sessionStartedRequest, Session session)
			throws SpeechletException {
		LOGGER.debug("New Session Started With Session ID: " + session.getSessionId());
	}
}
